#include<iostream>
#include<fstream>
#include<string>
#include<sstream>
#include<queue>
#include<thread>
#include<chrono>
using namespace std;
using namespace chrono;

template <class T>
class Node{
public:
    Node *left, *right;
    T data;
    int height;
    T rating;
    Node(T data){
        this->data = data;
        left = NULL;
        right = NULL;
        height = 0;
    }
    Node(T data, T rating){
        this->data = data;
        left = NULL;
        right = NULL;
        height = 0;
        this->rating = rating;
    }
    Node(){
        left = right = NULL;
    }
};
template <class T>
class AVL{
    public:
        Node<T> *root;
        AVL(){
            root = NULL;
        }

        int calcheight(Node<T> *root){
            if (root == NULL)
                return 0;
            return root->height;
        }
        int maxx(int a, int b){
            return (a > b) ? a : b;
        }
        int getBalance(Node<T> *root){
            if (root == NULL)
                return 0;
            return calcheight(root->left) - calcheight(root->right);
        }
        Node<T> *insert(Node<T> *root, T data,string rating){
            if (root == NULL){
                root = new Node<T>(data, rating);
                return root;
            }
            if (root->data < data){
                root->right = insert(root->right, data,rating);
            }else if (root->data > data){
                root->left = insert(root->left, data,rating);
            }else{
                return root;
            }
            root->height = 1 + max(calcheight(root->left), calcheight(root->right));
            int bf = getBalance(root);
            if (bf > 1 && getBalance(root->left) >= 0){
                return rightRotate(root);
            }
            if (bf > 1 && getBalance(root->left) < 0){
                root->left = leftRotate(root->left);
                return rightRotate(root);
            }
            if (bf < -1 && getBalance(root->right) <= 0){
                return leftRotate(root);
            }
            if (bf < -1 && getBalance(root->right) > 0){
                root->right = leftRotate(root->right);
                return leftRotate(root);
            }
            return root;
        }
        Node<T> *insert(Node<T> *root, T data){
            if (root == NULL){
                root = new Node<T>(data);
                return root;
            }
            if (root->data < data){
                root->right = insert(root->right, data);
            }else if (root->data > data){
                root->left = insert(root->left, data);
            }else{
                return root;
            }
            root->height = 1 + max(calcheight(root->left), calcheight(root->right));
            int bf = getBalance(root);
            if (bf > 1 && getBalance(root->left) >= 0){
                return rightRotate(root);
            }
            if (bf > 1 && getBalance(root->left) < 0){
                root->left = leftRotate(root->left);
                return rightRotate(root);
            }
            if (bf < -1 && getBalance(root->right) <= 0){
                return leftRotate(root);
            }
            if (bf < -1 && getBalance(root->right) > 0){
                root->right = leftRotate(root->right);
                return leftRotate(root);
            }
            return root;
        }
        // Rotate right
        Node<T> *rightRotate(Node<T> *y){
            Node<T> *x = y->left;
            Node<T> *T2 = x->right;
            x->right = y;
            y->left = T2;
            y->height = maxx(calcheight(y->left), calcheight(y->right)) + 1;
            x->height = maxx(calcheight(x->left), calcheight(x->right)) + 1;
            return x;
        }

        // Rotate left
        Node<T> *leftRotate(Node<T> *x){
            Node<T> *y = x->right;
            Node<T> *T2 = y->left;
            y->left = x;
            x->right = T2;
            x->height = maxx(calcheight(x->left), calcheight(x->right)) + 1;
            y->height = maxx(calcheight(y->left), calcheight(y->right)) + 1;
            return y;
        }

        void inorder(Node<T> *root){
            if (root == NULL){
                return;
            }
            inorder(root->left);
            cout << root->data << " ";
            inorder(root->right);
        }

        Node<T> *deleteNode(Node<T> *root, T key){
            if (root == NULL){
                return NULL;
            }
            if (root->data > key){
                root->left = deleteNode(root->left, key);
            }else if (root->data < key){
                root->right = deleteNode(root->right, key);
            }else{
                if ((root->left == NULL) || (root->right == NULL)){
                    Node<T> *temp = root->left ? root->left : root->right;
                    if (temp == NULL){
                        temp = root;
                        root = NULL;
                    }else{
                        *root = *temp;
                    }
                free(temp);
                }else{
                    Node<T> *temp = nodeWithMimumValue(root->right);
                    root->data = temp->data;
                    root->right = deleteNode(root->right, temp->data);
                }
            }
            if (root == NULL){
                return NULL;
            }
            root->height = 1 + maxx(calcheight(root->left), calcheight(root->right));
            int bf = getBalance(root);
            if (bf > 1 && getBalance(root->left) >= 0){
                return rightRotate(root);
            }
            if (bf > 1 && getBalance(root->left) < 0){
                root->left = leftRotate(root->left);
                return rightRotate(root);
            }
            if (bf < -1 && getBalance(root->right) <= 0){
                return leftRotate(root);
            }
            if (bf < -1 && getBalance(root->right) > 0){
                root->right = leftRotate(root->right);
                return leftRotate(root);
            }
            return root;
        }

        Node<T> *nodewithmaxValue(Node<T> *root){
            if (root->right == NULL){
                return root;
            }
            return nodewithmaxValue(root->right);
        }

        Node<T> *nodeWithMimumValue(Node<T> *node){
            Node<T> *current = node;
            while (current->left != NULL)
                current = current->left;
            return current;
        }

        void printTree(Node<T> *root, string indent, bool last){
            if (root != nullptr){
                cout << indent;
                if (last){
                    cout << "R----";
                    indent += "   ";
                }else{
                    cout << "L----";
                    indent += "|  ";
                }
            cout << root->data << endl;
            printTree(root->left, indent, false);
            printTree(root->right, indent, true);
            }
        }

        Node<T>* AVLsearch(Node<T>* root, string key){
            if (root == NULL){
                return NULL;
            }

            else if (root->data == key){
                return root;
            }

            else if (root->data > key) {
                return AVLsearch(root->left, key);
                
            }

            else {
                return AVLsearch(root->right, key);
                
            }
        }
        Node<T>* Search_node(Node<T>* root, string key){
            if (root == NULL){
                return NULL;
            }

            else if (root->data == key){
                return root;
            }

            else if (root->data > key) {
                return Search_node(root->left, key);                
            }
            else {
                return Search_node(root->right, key);
            }
        }
        void deleteTree(Node<T> *node){
            if (node == NULL)
                return;
            deleteTree(node->left);
            deleteTree(node->right);
            delete node;
            node = NULL;

        }
};

vector<string> createFileNames(){
    vector<string> fileNames;
    for (int i = 1; i <= 51; i++){
        string fileN = "movies_";
        fileN += to_string(i);
        fileN += ".csv";
        fileNames.push_back(fileN);
        fileN.clear();
    }
    return fileNames;
}
string searchFile(vector<string> fileNames, string data){
    int i = 0;
    for (i = 1; i < fileNames.size(); i++){
        ifstream current(fileNames[i]);
        string line,word1,word2;
        int limit=0;
        getline(current,line);
        getline(current, line);
        stringstream s(line);
        int j=0, key;
        while (getline(s, word1, ',')) {
            if(j==2){              
                if(word1>=data){
                    i--;
                    current.close();
                    return fileNames[i];
                }
                break;
            }
            word1.clear();
            j++;
        }
        current.close();
    }
    return "NULL";
}
void rating_movie(string name, vector<string>filenames){
    string f_name = searchFile(filenames, name), line, word1,word2, word3;
    string rating;
    AVL<string> b;
    if(f_name=="NULL"){
        cout<<"The movie is not in the dataset";
    }
    ifstream fp(f_name);
    while (getline(fp,line))
    {
        stringstream s(line);
        int i=0, key;
        while (getline(s, word1, ',')) {
            if(i==2){
                if(word2!=word1){
                    getline(s, rating, ',');
                    b.root = b.insert(b.root, word1, rating);
                    word2 = word1;
                }
            }
            i++;
        }
    }
    auto start = steady_clock::now();
    Node<string> *temp =  b.Search_node(b.root, name);
    if(temp){
        cout<<"Movie "<<temp->data<<" found in file: "<<f_name<<" with rating: "<<temp->rating<<endl;
    }
    else{
        cout<<"File not found in file"<<endl;
        return;
    }
    auto end = steady_clock::now();
    float duration = duration_cast<microseconds>(end - start).count();
    cout<<endl<<"Time Taken to search movie name in file: ";
    cout << duration / 1000000<<" seconds. "<<endl;
}
void AVL_file_insertion(vector<string>filenames, string name){
    string f_name = searchFile(filenames, name), line, word1,word2;
    AVL<string> b;
    if(f_name=="NULL"){
        cout<<"The movie is not in the dataset";
    }
    ifstream fp(f_name);
    while (getline(fp,line))
    {
        stringstream s(line);
        int i=0, key;
        while (getline(s, word1, ',')) {
            if(i==2){
                if(word2!=word1){
                    b.root = b.insert(b.root, word1);
                    word2 = word1;
                }
            }
            word1.clear();
            i++;
        }
    }
    auto start = steady_clock::now();
    Node<string>*temp = b.AVLsearch(b.root, name);
    if(temp){
        cout<<"Movie "<<temp->data<<" found in file: "<<f_name<<endl;
    }
    else{
        cout<<"File not found in file"<<endl;
        return;
    }
    auto end = steady_clock::now();
    float duration = duration_cast<microseconds>(end - start).count();
    cout<<"Time Taken to search movie name in file: ";
    cout << duration / 1000000<<" seconds. "<<endl;
}

int main(){
    int choice,loc;
    char song[100];
    cout<<"\t\t\t\a\a\a\a*WELCOME*"<<endl;
    string line, name, word1, word2;
    vector<string> filenames;
    filenames = createFileNames();
    word2.clear();
    
    
    do{
        cout<<"\n1.Search movie\n2.Rating of the movie\n"<<endl;
        cout<<("\n\a\a\a\aEnter your choice-(Enter 3 to exit): ");
        cin>>choice;

        switch(choice)
        {
            case 1: 
                cout<<"\n\n\a\a\a\aEnter a movie name: ";
                fflush(stdin);
                getline(cin,name);
                AVL_file_insertion(filenames,name);
            break;
            case 2:
                cout<<"\n\n\a\a\a\aEnter a movie name: ";
                name.clear();
                fflush(stdin);
                getline(cin,name);
                rating_movie(name, filenames);
            break;
        }
    }while(choice!=3);
    return 0;
}